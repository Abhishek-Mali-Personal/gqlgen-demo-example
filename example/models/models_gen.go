// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"time"
)

type ResultUnion interface {
	IsResultUnion()
}

type CompanyList struct {
	Companies []*Company `json:"companies"`
}

func (CompanyList) IsResultUnion() {}

type CreateCompany struct {
	Name    string  `json:"name"`
	Website *string `json:"website,omitempty"`
}

type CreateEmployee struct {
	Name        string `json:"name"`
	Designation string `json:"designation"`
	Email       string `json:"email"`
	CompanyID   int    `json:"company_id"`
}

type CreateTask struct {
	Name        string     `json:"name"`
	Description *string    `json:"description,omitempty"`
	StartDate   time.Time  `json:"start_date"`
	EndDate     *time.Time `json:"end_date,omitempty"`
	EmployeeIds []int      `json:"employee_ids"`
}

type EmployeeList struct {
	Employees []*Employee `json:"employees"`
}

func (EmployeeList) IsResultUnion() {}

type FilterCompanyInput struct {
	EmployeeName   *string `json:"employee_name,omitempty"`
	CompanyName    *string `json:"company_name,omitempty"`
	EmployeeEmail  *string `json:"employee_email,omitempty"`
	CompanyWebsite *string `json:"company_website,omitempty"`
}

type FilterInput struct {
	EmployeeName        *string    `json:"employee_name,omitempty"`
	EmployeeDesignation *string    `json:"employee_designation,omitempty"`
	TaskName            *string    `json:"task_name,omitempty"`
	EmployeeEmail       *string    `json:"employee_email,omitempty"`
	TaskStartDate       *time.Time `json:"task_start_date,omitempty"`
	TaskEndDate         *time.Time `json:"task_end_date,omitempty"`
}

type Pagination struct {
	TotalRows  int64       `json:"total_rows"`
	TotalPages int         `json:"total_pages"`
	Page       int         `json:"page"`
	Sort       string      `json:"sort"`
	Limit      int         `json:"limit"`
	Rows       ResultUnion `json:"rows,omitempty"`
}

type TaskList struct {
	Tasks []*Task `json:"tasks"`
}

func (TaskList) IsResultUnion() {}
